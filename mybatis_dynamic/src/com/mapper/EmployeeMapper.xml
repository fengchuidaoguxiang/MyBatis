<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mapper.EmployeeMapper">
    <select id="query" resultType="Employee">
        select id,name,sn,salary,deptId FROM employee
        <if test="minSalary!=null">
            WHERE salary>=#{minSalary}
        </if>
    </select>

    <select id="query2" resultType="Employee">
        select id,name,sn,salary,deptId FROM employee WHERE 1=1
        <if test="minSalary!=null">
            AND salary >= #{minSalary}
        </if>
        <if test="maxSalary!=null">
            AND salary &lt;= #{maxSalary}
        </if>
    </select>

    <select id="query3" resultType="Employee">
        SELECT id,name,sn,salary,deptId FROM employee WHERE 1=1
        <choose>
            <when test="deptId > 0">AND deptId=#{deptId}</when>
            <otherwise>AND deptId IS NOT NULL </otherwise>
        </choose>
    </select>

    <select id="query4" resultType="Employee">
        SELECT id,name,sn,salary,deptId FROM employee
        <where>
            <if test="minSalary!=null">
                AND salary>=#{minSalary}
            </if>
            <if test="maxSalary!=null">
                AND salary&lt;=#{maxSalary}
            </if>
            <choose>
                <when test="deptId > 0">
                  AND deptId=#{deptId}
                </when>
                <otherwise>
                    AND deptId IS NOT NULL
                </otherwise>
            </choose>
        </where>
        <choose></choose>
    </select>

    <update id="update">
        UPDATE employee SET
    </update>

    <delete id="batchDelete">
        DELETE FROM employee WHERE id IN
        <!--
            foreach元素：
                    collection属性：表示对哪一个集合或数组做迭代
                                如果参数是数组类型，此时Map的key为array,
                                如果参数是List类型，此时Map的key为list,
                                我们可以在参数上使用Param注解,规定死Map中key是什么。
                    open属性：在迭代集合之前,拼接什么符号。
                    close属性：在迭代集合之后，拼接什么符号。
                    separator属性：在迭代元素时，每一个元素之间使用什么符号分割开来。
                    item属性：被迭代的每一个元素的变量。
                    index属性：迭代的索引。
         -->
        <foreach collection="ids" open="(" close=")" separator="," item="id">
            #{id}
        </foreach>
    </delete>

    <insert id="batchSave">
        insert into employee(id,name,sn,salary,deptId) values
        <foreach collection="ems" separator="," item="employee">
            (#{employee.id},#{employee.name},#{employee.sn},#{employee.salary},#{employee.deptId})
        </foreach>
    </insert>
</mapper>